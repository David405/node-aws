name: EC2 Deployment Webhook

# Trigger the workflow on every push to the specified branch
on:
  push:
    branches:
      - master # Replace with your deployed branch (e.g., 'production') if different

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the latest code from the branch
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Match your EC2 Node.js version

      # Step 3: Install project dependencies locally
      - name: Install dependencies
        run: npm install

      # Step 4: Deploy to EC2 and redeploy the app
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
          DEPLOY_DIR: '/home/ubuntu/node-aws'
        run: |
          # Write the SSH key to a temporary file
          echo "$EC2_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Sync the latest code to EC2
          rsync -avz --progress -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" ./ $EC2_USER@$EC2_HOST:$DEPLOY_DIR

          # SSH into EC2, install dependencies, and redeploy
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            cd $DEPLOY_DIR
            npm install # Ensure latest dependencies are installed
            pm2 stop node-aws || true # Stop the app if running, ignore errors if not
            pm2 delete node-aws || true # Delete old instance, ignore errors if not exists
            pm2 start npm --name node-aws -- start # Start fresh with latest code
            pm2 save # Save the process list for reboot persistence
          EOF

          # Clean up the SSH key
          rm -f private_key.pem